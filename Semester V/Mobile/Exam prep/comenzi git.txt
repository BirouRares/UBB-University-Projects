SETUP SERVER
_____________________________________________________________
0. imi creez un folder pe desktop
1. cd /c/Users/Stefan/Desktop/Mobile_Sample
2. ls -l
3. cd in folder de examen
4. iau de pe git codul http
5. git clone *https://github.com/dancojocar/exam-2025-28b.git*
6. dupa ce s-a clonat sv deschid vsc ma duc in folderul cu sv
7. cd server
8. npm install
9. npm start
10. verific pe browser ca merge un get all 
ex: http://localhost:2528/transactions

SETUP FRONTEND SI DAT RUN
_____________________________________________________________
dau in cmd pentru IP:
ipconfig | findstr /i "IPv4"

1. npx create-expo-app client
2. cd client

3.
npm install axios react-query @react-navigation/native @react-navigation/stack react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context react-native-vector-icons @react-native-async-storage/async-storage
npm install @react-native-async-storage/async-storage react-native-toast-message
npm install react-native-paper

4.npx expo start


FISIERE SI STRUCTURA!
________________________________________________________________

***CLASA***
client\models:
export default class Transaction {
    id: number;
    date: string;
    amount: number;
    type: 'income' | 'expense';
    category: string;
    description: string;
  
    constructor(
      id: number,
      date: string,
      amount: number,
      type: 'income' | 'expense',
      category: string,
      description: string
    ) {
      this.id = id;
      this.date = date;
      this.amount = amount;
      this.type = type;
      this.category = category;
      this.description = description;
    }
  
    static fromJson(json: any): Transaction {
      return new Transaction(
        json.id,
        json.date,
        json.amount,
        json.type,
        json.category,
        json.description
      );
    }
  }
  

***API CALLS****
client\lib\api.ts:
import axios from 'axios';
import Transaction from '../models/Transaction';

const API_URL = 'http://192.168.1.202:2528'; // Replace with actual server IP

export const api = axios.create({
  baseURL: API_URL,
  headers: { 'Content-Type': 'application/json' },
});

// Fetch all transactions (Main Section A)
export const fetchTransactions = async (): Promise<Transaction[]> => {
  try {
    const response = await api.get('/transactions');
    console.log('Fetched Transactions:', response.data);
    return response.data.map(Transaction.fromJson);
  } catch (error) {
    console.error('Error fetching transactions:', error);
    throw error;
  }
};

// Fetch a single transaction by ID (Main Section B)
export const fetchTransactionById = async (id: number): Promise<Transaction> => {
  try {
    const response = await api.get(`/transaction/${id}`);
    console.log('Fetched Transaction:', response.data);
    return Transaction.fromJson(response.data);
  } catch (error) {
    console.error(`Error fetching transaction ${id}:`, error);
    throw error;
  }
};

// Add a new transaction (Main Section C)
export const addTransaction = async (transaction: Omit<Transaction, 'id'>): Promise<Transaction> => {
  try {
    const response = await api.post('/transaction', transaction);
    console.log('Added Transaction:', response.data);
    return Transaction.fromJson(response.data);
  } catch (error) {
    console.error('Error adding transaction:', error);
    throw error;
  }
};

// Delete a transaction (Main Section D)
export const deleteTransaction = async (id: number): Promise<void> => {
  try {
    await api.delete(`/transaction/${id}`);
    console.log(`Deleted Transaction ID: ${id}`);
  } catch (error) {
    console.error(`Error deleting transaction ${id}:`, error);
    throw error;
  }
};

// Fetch all transactions for Reports & Insights
export const fetchAllTransactions = async (): Promise<Transaction[]> => {
  try {
    const response = await api.get('/allTransactions');
    console.log('Fetched All Transactions:', response.data);
    return response.data.map(Transaction.fromJson);
  } catch (error) {
    console.error('Error fetching all transactions:', error);
    throw error;
  }
};

export const fetchAllTop3 = async (): Promise<Transaction[]> => {
    try {
      const response = await api.get('/allTransactions');
      console.log('Fetched All Transactions:', response.data);
      return response.data.map(Transaction.fromJson);
    } catch (error) {
      console.error('Error fetching all transactions:', error);
      throw error;
    }
  };
  

***MAIN LIST***
client\app\(tabs)\index.tsx:
import React, { useState, useEffect, useCallback } from 'react';
import { View, Text, FlatList, TouchableOpacity, ActivityIndicator, RefreshControl, Button } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Toast from 'react-native-toast-message';
import { fetchTransactions } from '../../lib/api';
import Transaction from '../../models/Transaction';
import { useRouter } from 'expo-router';
import { FAB } from 'react-native-paper'; // Floating Action Button

export default function TransactionListScreen() {
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(true);
  const [offline, setOffline] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const router = useRouter();

  const loadTransactions = async () => {
    setLoading(true);
    try {
      console.log('Fetching transactions...');
      const data = await fetchTransactions();
      console.log('Fetched transactions:', data);

      if (data.length === 0) {
        Toast.show({
          type: 'info',
          text1: 'No Transactions',
          text2: 'There are no transactions available.',
        });
      }

      setTransactions(data);
      await AsyncStorage.setItem('transactions', JSON.stringify(data));
      setOffline(false);
    } catch (error) {
      console.log('Fetch Error:', error);

      Toast.show({
        type: 'error',
        text1: 'Network Error',
        text2: 'Failed to load transactions. Showing offline data.',
      });

      setOffline(true);
      const cachedData = await AsyncStorage.getItem('transactions');
      if (cachedData) {
        setTransactions(JSON.parse(cachedData));
      }
    }
    setLoading(false);
  };

  useEffect(() => {
    loadTransactions();
  }, []);

  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    await loadTransactions();
    setRefreshing(false);
  }, []);

  if (loading) return <ActivityIndicator size="large" color="blue" />;

  return (
    <View style={{ flex: 1, padding: 16, backgroundColor: '#121212' }}>
      <Text style={{ fontSize: 20, fontWeight: 'bold', marginBottom: 10, color: 'white' }}>Your Transactions</Text>

      {/* Show offline message with retry button */}
      {offline && (
        <View style={{ alignItems: 'center', marginBottom: 10 }}>
          <Text style={{ color: 'red', fontSize: 16, marginBottom: 5 }}>Offline - Showing cached data</Text>
          <Button title="Retry" onPress={loadTransactions} color="#BB86FC" />
        </View>
      )}

      {/* View Insights Button */}
      <Button
        title="View Insights"
        onPress={() => router.push('/insights')}
        color="#03DAC5" // Bright cyan for visibility
      />


      {/* View Reports Button */}
      <Button
        title="View Reports"
        onPress={() => router.push('/reports')}
        color="#BB86FC"
      />

      <FlatList
        data={transactions}
        keyExtractor={(item) => item.id.toString()}
        ListEmptyComponent={
          <View style={{ alignItems: 'center', marginTop: 20 }}>
            <Text style={{ fontSize: 18, color: '#B0B0B0' }}>No transactions available</Text>
          </View>
        }
        renderItem={({ item }) => (
          <TouchableOpacity onPress={() => router.push(`/transactions/${item.id.toString()}` as any)}>
            <View style={{ padding: 10, borderBottomWidth: 1, borderBottomColor: '#BB86FC', backgroundColor: '#1E1E1E', marginVertical: 4 }}>
              <Text style={{ fontSize: 16, fontWeight: 'bold', color: 'white' }}>{item.category}</Text>
              <Text style={{ fontSize: 14, color: '#B0B0B0' }}>{item.description}</Text>
              <Text style={{ fontSize: 14, color: item.type === 'income' ? 'green' : 'red' }}>
                {item.type === 'income' ? '+' : '-'} ${item.amount}
              </Text>
            </View>
          </TouchableOpacity>
        )}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
      />

      {/* Floating Add Button */}
      <FAB
        style={{
          position: 'absolute',
          margin: 16,
          right: 0,
          bottom: 20,
          backgroundColor: '#6200ea',
        }}
        icon="plus"
        label="Add"
        onPress={() => router.push('/addTransaction')}
      />

      <Toast />
    </View>
  );
}


***PENTRU FIECARE ALTA ACTIVITATE IMI FAC UN FOLDER IN APP CE VA CONTINE UN index.tsx***
client\app\addTransaction:
import React, { useState } from 'react';
import { View, Text, TextInput, Button, Alert, ActivityIndicator } from 'react-native';
import Toast from 'react-native-toast-message';
import { addTransaction } from '../../lib/api';
import { useRouter } from 'expo-router';

export default function AddTransactionScreen() {
  const router = useRouter();
  const [amount, setAmount] = useState('');
  const [type, setType] = useState<'income' | 'expense' | ''>('');
  const [category, setCategory] = useState('');
  const [description, setDescription] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    if (!amount || !type || !category || !description) {
      Alert.alert('Error', 'All fields are required.');
      return;
    }

    setLoading(true);
    try {
      const newTransaction = {
        date: new Date().toISOString().split('T')[0], // Current date
        amount: parseFloat(amount),
        type,
        category,
        description,
      };

      await addTransaction(newTransaction);

      Toast.show({
        type: 'success',
        text1: 'Transaction Added',
        text2: 'Your transaction has been successfully recorded.',
      });

      router.push('/'); // Navigate back to transactions list
    } catch (error) {
      Toast.show({
        type: 'error',
        text1: 'Error',
        text2: 'Failed to add transaction. Please try again.',
      });
    }
    setLoading(false);
  };

  return (
    <View style={{ flex: 1, padding: 16, backgroundColor: '#121212' }}> 
      <Text style={{ fontSize: 22, fontWeight: 'bold', marginBottom: 10, color: 'white' }}>Add New Transaction</Text>

      <TextInput
        placeholder="Amount"
        placeholderTextColor="#B0B0B0" // Light gray for readability
        keyboardType="numeric"
        value={amount}
        onChangeText={setAmount}
        style={{ borderBottomWidth: 1, borderBottomColor: '#BB86FC', marginBottom: 10, fontSize: 16, color: 'white' }}
      />

      <TextInput
        placeholder="Type (income or expense)"
        placeholderTextColor="#B0B0B0"
        value={type}
        onChangeText={(text) => setType(text as 'income' | 'expense')}
        style={{ borderBottomWidth: 1, borderBottomColor: '#BB86FC', marginBottom: 10, fontSize: 16, color: 'white' }}
      />

      <TextInput
        placeholder="Category"
        placeholderTextColor="#B0B0B0"
        value={category}
        onChangeText={setCategory}
        style={{ borderBottomWidth: 1, borderBottomColor: '#BB86FC', marginBottom: 10, fontSize: 16, color: 'white' }}
      />

      <TextInput
        placeholder="Description"
        placeholderTextColor="#B0B0B0"
        value={description}
        onChangeText={setDescription}
        style={{ borderBottomWidth: 1, borderBottomColor: '#BB86FC', marginBottom: 20, fontSize: 16, color: 'white' }}
      />

      {loading ? (
        <ActivityIndicator size="large" color="#BB86FC" />
      ) : (
        <Button title="Add Transaction" onPress={handleSubmit} color="#BB86FC" />
      )}

      <Toast />
    </View>
  );
}


client\app\insights\index.tsx:
import React, { useState, useEffect } from 'react';
import { View, Text, ActivityIndicator, FlatList } from 'react-native';
import Toast from 'react-native-toast-message';
import { fetchAllTop3 } from '../../lib/api';
import Transaction from '../../models/Transaction';

export default function InsightsScreen() {
  const [loading, setLoading] = useState(true);
  const [topCategories, setTopCategories] = useState<{ category: string; total: number }[]>([]);

  const loadTransactions = async () => {
    setLoading(true);
    try {
      const transactions = await fetchAllTop3();

      // Process transactions to calculate total spending per category
      const expensesByCategory: { [key: string]: number } = {};

      transactions.forEach((transaction) => {
        if (transaction.type === 'expense') {
          if (!expensesByCategory[transaction.category]) {
            expensesByCategory[transaction.category] = 0;
          }
          expensesByCategory[transaction.category] += transaction.amount;
        }
      });

      // Convert object to array and sort in descending order
      const sortedCategories = Object.entries(expensesByCategory)
        .map(([category, total]) => ({ category, total }))
        .sort((a, b) => b.total - a.total)
        .slice(0, 3); // Get top 3 categories

      setTopCategories(sortedCategories);
    } catch (error) {
      Toast.show({
        type: 'error',
        text1: 'Error',
        text2: 'Failed to fetch insights data.',
      });
    }
    setLoading(false);
  };

  useEffect(() => {
    loadTransactions();
  }, []);

  if (loading) return <ActivityIndicator size="large" color="blue" />;

  return (
    <View style={{ flex: 1, padding: 16, backgroundColor: '#121212' }}>
      <Text style={{ fontSize: 22, fontWeight: 'bold', color: 'white', marginBottom: 10 }}>
        Top 3 Spending Categories
      </Text>

      <FlatList
        data={topCategories}
        keyExtractor={(item) => item.category}
        renderItem={({ item, index }) => (
          <View style={{ padding: 10, borderBottomWidth: 1, borderBottomColor: '#BB86FC' }}>
            <Text style={{ fontSize: 20, fontWeight: 'bold', color: '#BB86FC' }}>
              #{index + 1}: {item.category}
            </Text>
            <Text style={{ fontSize: 18, color: 'red' }}>Total Spent: ${item.total.toFixed(2)}</Text>
          </View>
        )}
      />

      <Toast />
    </View>
  );
}


client\app\reports\index.tsx:
import React, { useState, useEffect } from 'react';
import { View, Text, ActivityIndicator, FlatList } from 'react-native';
import Toast from 'react-native-toast-message';
import { fetchAllTransactions } from '../../lib/api';
import Transaction from '../../models/Transaction';

export default function ReportsScreen() {
  const [loading, setLoading] = useState(true);
  const [monthlyExpenses, setMonthlyExpenses] = useState<{ month: string; total: number }[]>([]);

  const loadTransactions = async () => {
    setLoading(true);
    try {
      const transactions = await fetchAllTransactions();

      // Process transactions to calculate total spending per month
      const expensesByMonth: { [key: string]: number } = {};

      transactions.forEach((transaction) => {
        if (transaction.type === 'expense') {
          const month = transaction.date.substring(0, 7); // Extract YYYY-MM from date
          if (!expensesByMonth[month]) {
            expensesByMonth[month] = 0;
          }
          expensesByMonth[month] += transaction.amount;
        }
      });

      // Convert object to array and sort in descending order
      const sortedExpenses = Object.entries(expensesByMonth)
        .map(([month, total]) => ({ month, total }))
        .sort((a, b) => b.total - a.total);

      setMonthlyExpenses(sortedExpenses);
    } catch (error) {
      Toast.show({
        type: 'error',
        text1: 'Error',
        text2: 'Failed to fetch monthly spending.',
      });
    }
    setLoading(false);
  };

  useEffect(() => {
    loadTransactions();
  }, []);

  if (loading) return <ActivityIndicator size="large" color="blue" />;

  return (
    <View style={{ flex: 1, padding: 16, backgroundColor: '#121212' }}>
      <Text style={{ fontSize: 22, fontWeight: 'bold', color: 'white', marginBottom: 10 }}>
        Monthly Spending Analysis
      </Text>

      <FlatList
        data={monthlyExpenses}
        keyExtractor={(item) => item.month}
        renderItem={({ item }) => (
          <View style={{ padding: 10, borderBottomWidth: 1, borderBottomColor: '#BB86FC' }}>
            <Text style={{ fontSize: 18, color: 'white' }}>{item.month}</Text>
            <Text style={{ fontSize: 16, color: 'red' }}>Total Spent: ${item.total.toFixed(2)}</Text>
          </View>
        )}
      />

      <Toast />
    </View>
  );
}

client\app\transactions\[id].tsx:
import React, { useState, useEffect } from 'react';
import { View, Text, ActivityIndicator, Button, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Toast from 'react-native-toast-message';
import { fetchTransactionById, deleteTransaction } from '../../lib/api';
import Transaction from '../../models/Transaction';
import { useLocalSearchParams, useRouter } from 'expo-router';

export default function TransactionDetailScreen() {
  const { id } = useLocalSearchParams(); // Get transaction ID from URL
  const router = useRouter();
  const [transaction, setTransaction] = useState<Transaction | null>(null);
  const [loading, setLoading] = useState(true);
  const [offline, setOffline] = useState(false);

  const loadTransaction = async () => {
    setLoading(true);
    try {
      console.log(`Fetching transaction ${id}...`);
      const data = await fetchTransactionById(Number(id));
      console.log('Fetched transaction:', data);

      setTransaction(data);
      await AsyncStorage.setItem(`transaction_${id}`, JSON.stringify(data));
      setOffline(false);
    } catch (error) {
      console.log(`Fetch Error for Transaction ${id}:`, error);

      Toast.show({
        type: 'error',
        text1: 'Network Error',
        text2: 'Failed to load transaction. Showing offline data.',
      });

      setOffline(true);
      const cachedData = await AsyncStorage.getItem(`transaction_${id}`);
      if (cachedData) {
        setTransaction(JSON.parse(cachedData));
      }
    }
    setLoading(false);
  };

  useEffect(() => {
    loadTransaction();
  }, []);

  const handleDelete = async () => {
    try {
      await deleteTransaction(Number(id));
      Toast.show({
        type: 'success',
        text1: 'Transaction Deleted',
        text2: 'The transaction was successfully removed.',
      });
      router.push('/'); // Navigate back to transactions list
    } catch (error) {
      Alert.alert('Error', 'Failed to delete transaction.');
    }
  };

  if (loading) return <ActivityIndicator size="large" color="blue" />;

  return (
    <View style={{ flex: 1, padding: 16 }}>
      {offline && <Text style={{ color: 'red', textAlign: 'center' }}>Offline - Showing cached data</Text>}

      {transaction ? (
        <>
          <Text style={{ fontSize: 22, fontWeight: 'bold', marginBottom: 10, color : 'purple' }}>Transaction Details</Text>
          <Text style={{ fontSize: 18 , color : 'purple' }}>Category: {transaction.category}</Text>
          <Text style={{ fontSize: 18 , color : 'purple' }}>Amount: ${transaction.amount}</Text>
          <Text style={{ fontSize: 18, color: transaction.type === 'income' ? 'green' : 'red' }}>
            Type: {transaction.type}
          </Text>
          <Text style={{ fontSize: 18 , color : 'purple' }}>Description: {transaction.description}</Text>
          <Text style={{ fontSize: 18 , color : 'purple' }}>Date: {transaction.date}</Text>
          
          <Button title="Delete Transaction" onPress={handleDelete} color="red" />
        </>
      ) : (
        <Text>No transaction details available.</Text>
      )}
      <Toast />
    </View>
  );
}








