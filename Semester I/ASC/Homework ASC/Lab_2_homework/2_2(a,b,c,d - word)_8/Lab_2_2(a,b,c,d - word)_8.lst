     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;a,b,c,d - word
    14 00000000 0500                        a dw 5
    15 00000002 0A00                        b dw 10
    16 00000004 0F00                        c dw 15
    17 00000006 1400                        d dw 20
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ;(b+c+d)-(a+a)
    23                                          
    24                                          ;b+c
    25 00000000 66A1[02000000]                  mov AX, [b]
    26 00000006 660305[04000000]                add AX, [c]
    27                                          
    28                                          ;(b+c+d)
    29 0000000D 660305[06000000]                add AX, [d]
    30                                          
    31                                          ; a+a
    32 00000014 668B1D[00000000]                mov BX, [a]
    33 0000001B 66031D[00000000]                add BX, [a]
    34                                          
    35                                          ;(b+c+d)-(a+a)
    36 00000022 6629D8                          sub AX, BX
    37                                          
    38 00000025 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    39 00000027 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
