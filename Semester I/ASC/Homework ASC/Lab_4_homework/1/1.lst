     1                                  ;   Given the words A and B, compute the byte C as follows:
     2                                  ;the bits 0-5 are the same as the bits 5-10 of A
     3                                  ;the bits 6-7 are the same as the bits 1-2 of B.
     4                                  ;   Compute the doubleword D as follows:
     5                                  ;the bits 8-15 are the same as the bits of C
     6                                  ;the bits 0-7 are the same as the bits 8-15 of B
     7                                  ;the bits 24-31 are the same as the bits 0-7 of A
     8                                  ;the bits 16-23 are the same as the bits 8-15 of A
     9                                  
    10                                  bits 32
    11                                  
    12                                  global start        
    13                                  
    14                                  extern exit               
    15                                  import exit msvcrt.dll    
    16                                  
    17                                  segment data use32 class=data
    18 00000000 5555                        a dw 0101010101010101b
    19 00000002 AA2A                        b dw 0010101010101010b
    20 00000004 00                          c db 0
    21 00000005 00000000                    d dd 0
    22                                  
    23                                  segment code use32 class=code
    24                                      start:
    25                                          
    26                                          ;Given the words A and B, compute the byte C as follows:
    27                                          ;the bits 0-5 are the same as the bits 5-10 of A
    28                                          
    29 00000000 66BB0000                        mov BX, 0; store the result in BX
    30 00000004 66A1[00000000]                  mov AX, word [a] ;AX= 0101010101010101b         we isolate bits 5-10 of A
    31 0000000A 6625C00F                        and AX, 0000111111000000b   ; AX=0000010101000000b=1344
    32 0000000E B105                            mov CL,5
    33 00000010 66D3C8                          ror AX, CL ; rotate right 5 bits => AX=00000000000101010b=42
    34 00000013 6609C3                          or BX,AX  ; BX=AX=00000000000101010b=42
    35 00000016 B700                            mov BH, 0 ; BL=00101010=42
    36                                          
    37                                          ;the bits 6-7 are the same as the bits 1-2 of B.
    38                                          
    39 00000018 66A1[02000000]                  mov AX, word [b] ;AX=0010101010101010b=10922     we isolate bits 1-2 of B
    40 0000001E 6683E006                        and AX, 0000000000000110b ;AX=0000000000000010b=2
    41 00000022 B105                            mov CL, 5
    42 00000024 66D3C0                          rol AX,CL  ; rotate left 5 bits => AX=0000000001000000b=64
    43 00000027 6609C3                          or BX, AX  ; BX=0000000001101010b=106
    44 0000002A B700                            mov BH, 0 ; BL=01101010b=106 
    45 0000002C 881D[04000000]                  mov byte [c], BL ; c=01101010b = 106 => final result
    46 00000032 66BB0000                        mov BX,0 ;reset BX
    47                                          
    48                                          ;Compute the doubleword D as follows:
    49                                          ;the bits 8-15 are the same as the bits of C
    50                                          
    51 00000036 BB00000000                      mov EBX,0  ;store the result in EBX
    52 0000003B B800000000                      mov EAX,0  ;reset EAX
    53 00000040 8A25[04000000]                  mov AH, byte [c] ; AX=01101010 00000000b=27136
    54 00000046 09C3                            or EBX, EAX; EBX=00000000 00000000 01101010 00000000b=27136
    55 00000048 B800000000                      mov EAX,0  ;reset EAX
    56                                          
    57                                          ;the bits 0-7 are the same as the bits 8-15 of B
    58                                          
    59 0000004D 66A1[02000000]                  mov AX, word [b] ;AX=00101010 10101010b=10922    we isolate bits 8-15 of B
    60 00000053 662500FF                        and AX, 1111111100000000b  ; AX=00101010 00000000b= 10752
    61 00000057 B108                            mov CL, 8
    62 00000059 D3C8                            ror EAX, CL ; rotate right 8 bits => EAX=00000000 00000000 00000000 00101010b=42
    63 0000005B 09C3                            or EBX, EAX ; EBX=00000000 00000000 01101010 00101010b = 27178
    64 0000005D B800000000                      mov EAX,0  ;reset EAX
    65                                          
    66                                          ;the bits 24-31 are the same as the bits 0-7 of A
    67                                          
    68 00000062 66A1[00000000]                  mov AX, word [a] ; AX=01010101 01010101b=21845  we isolate bits 0-7 of A
    69 00000068 6625FF00                        and AX, 0000000011111111b  ; AX=00000000 01010101b=85
    70 0000006C B108                            mov CL, 8
    71 0000006E D3C8                            ror EAX, CL  ; rotate right 8 bits => EAX=01010101 00000000 00000000 00000000b=1426063360
    72 00000070 09C3                            or EBX, EAX  ; EBX=01010101 00000000 01101010 00101010b = 1426090538
    73 00000072 B800000000                      mov EAX,0  ;reset EAX
    74                                          
    75                                          ;the bits 16-23 are the same as the bits 8-15 of A
    76                                          
    77 00000077 66A1[00000000]                  mov AX, word [a] ; AX=01010101 01010101b=21845  we isolate bits 8-15 of A
    78 0000007D 662500FF                        and AX, 1111111100000000b  ; AX=01010101 00000000b=21760
    79 00000081 B108                            mov CL, 8
    80 00000083 D3C0                            rol EAX, CL  ; rotate right 8 bits => EAX=00000000 01010101 00000000 00000000b=5570560
    81 00000085 09C3                            or EBX, EAX ; EBX=01010101 01010101 01101010 00101010b = 1431661098 => final result
    82 00000087 B800000000                      mov EAX,0  ;reset EAX
    83                                          
    84 0000008C 891D[05000000]                  mov dword [d], EBX
    85 00000092 BB00000000                      mov EBX,0  ;reset EBX
    86 00000097 B900000000                      mov ECX,0  ;;reset ECX
    87                                          
    88 0000009C 8A0D[04000000]                  mov CL, byte [c] ;verification: CL=01101010b = 106
    89                                          
    90 000000A2 8B15[05000000]                  mov EDX, dword [d] ;verification EDX=01010101 01010101 01101010 00101010b = 1431661098
    91                                          
    92                                          
    93 000000A8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    94 000000AA FF15[00000000]                  call    [exit]       ; call exit to terminate the program
